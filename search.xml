<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>双目视觉学习笔记一</title>
    <url>/2020/10/24/%E5%8F%8C%E7%9B%AE%E8%A7%86%E8%A7%89%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>最近在跟从老师学习双目视觉的相关知识，这篇笔记是队友zyh整理的，主要是一些学习链接与注意点，整理在此。</p>
<h2 id="二、学习笔记内容"><a href="#二、学习笔记内容" class="headerlink" title="二、学习笔记内容"></a>二、学习笔记内容</h2><h3 id="坐标系转换、畸变校正、单目标定原理"><a href="#坐标系转换、畸变校正、单目标定原理" class="headerlink" title="坐标系转换、畸变校正、单目标定原理"></a>坐标系转换、畸变校正、单目标定原理</h3><p>(坐标系转换)<a href="https://blog.csdn.net/a6333230/article/details/88343282" target="_blank" rel="noopener">https://blog.csdn.net/a6333230/article/details/88343282</a><br>(畸变校正：单目标定)<a href="https://www.cnblogs.com/zyly/p/9366080.html#_label1" target="_blank" rel="noopener">https://www.cnblogs.com/zyly/p/9366080.html#_label1</a><br><strong>相关函数</strong><br>畸变校正：通过calibrate Camera()得到的畸变系数，利用initUndistortRectifyMap()（输出映射）和remap()（重映射）校正</p>
<h3 id="立体校正原理"><a href="#立体校正原理" class="headerlink" title="立体校正原理"></a>立体校正原理</h3><p><strong>步骤说明：</strong><br>①计算左右相机旋转矩阵R1、R2和投影矩阵P1、P2；//stereoRectify()<br>②计算校正查找映射表；//initUndistortRectifyMap()<br>③校正两幅图像检验效果；//画线检验<br><strong>重投影矩阵Q：</strong><br>是立体校正的输出矩阵，其实现了世界坐标系和图像像素坐标系之间的转换。<br><strong>相关函数：</strong><br>stereoCalibrate()双目摄像机标定，计算了两个摄像头进行立体像对之间的转换关系，根据左右相机的参数矩阵，生成两个相机之间的关系矩阵，以及基本和本质矩阵<br>cvFindExtrinsicCameraParams2()计算摄像机外部参数<br>stereoRectify()函数计算R1、R2、P1、P2、Q；</p>
<h3 id="立体匹配（SGBM算法）"><a href="#立体匹配（SGBM算法）" class="headerlink" title="立体匹配（SGBM算法）"></a>立体匹配（SGBM算法）</h3><p><strong>SAD算法原理（图像匹配）</strong><br>SGBM算法利用SAD滑动窗口寻找每个像素的最优视差<br><a href="https://blog.csdn.net/hitzijiyingcai/article/details/83178348?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight" target="_blank" rel="noopener">https://blog.csdn.net/hitzijiyingcai/article/details/83178348?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight</a><br>SGBM原理详解<a href="https://www.cnblogs.com/hrlnw/p/4746170.html" target="_blank" rel="noopener">https://www.cnblogs.com/hrlnw/p/4746170.html</a><br>(参数含义)<a href="https://blog.csdn.net/A_L_A_N/article/details/81490043" target="_blank" rel="noopener">https://blog.csdn.net/A_L_A_N/article/details/81490043</a><br><a href="https://blog.csdn.net/qq_36930777/article/details/78128184" target="_blank" rel="noopener">https://blog.csdn.net/qq_36930777/article/details/78128184</a><br>注意：在OpenCV2.1中，BM算法可以用 CV_16S 或者 CV_32F 的方式输出视差数据，使用32位float格式可以得到真实的视差值，而CV_16S格式得到的视差矩阵则需要除以16才能得到正确的视差。OpenCV2. 另外两种立体匹配算法 SGBM 和GC 只支持 CV_16S 格式的 disparity 矩阵。<br>numberOfDisparities：视差窗口，即最大视差值与最小视差值之差,窗口大小必须是16 的整数倍，int型。</p>
]]></content>
  </entry>
  <entry>
    <title>markdown基础</title>
    <url>/2020/02/10/markdown%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h2 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 能被使用来撰写电子书，如：Gitbook。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息,例如：GitHub、简书等。</p>
<h2 id="markdown标题"><a href="#markdown标题" class="headerlink" title="markdown标题"></a>markdown标题</h2><p>markdown标题有两种格式。<br> 1、使用=和-标记一级和二级标题<br>语法格式如下：<br>&emsp; 我展示的是一级标题<br>&emsp; ================<br>&emsp; 我展示的是二级标题<br>&emsp; ----------------<br> 2、使用#号标记<br>使用<code>#</code>号可以表示1-6级标题，一级标题对应一个<code>#</code>，二级标题对应两个<code>#</code>，依次类推。<br>语法格式如下：<br>&emsp;#一级标题<br>&emsp;##二级标题<br>&emsp;###三级标题<br>&emsp;####四级标题<br>&emsp;#####五级标题<br>&emsp;######六级标题</p>
<h2 id="markdown段落格式"><a href="#markdown段落格式" class="headerlink" title="markdown段落格式"></a>markdown段落格式</h2><ul>
<li><p><strong>markdown段落</strong><br>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p>
</li>
<li><p><strong>字体</strong><br>*斜体文本*<br>_斜体文本_<br>**粗体文本**<br>__粗体文本__<br>***粗斜体文本***<br>___粗斜体文本___</p>
</li>
<li><p><strong>分割线</strong><br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br>***<br>* * *<br>*****<br>- - -<br>-----------<br>效果如下所示：</p>
</li>
</ul>
<hr>
<hr>
<ul>
<li><p><strong>删除线</strong><br>如果段落上的文字要添加删除线，只需要在文字的两端加上两个<code>~</code>即可，实例如下：<br>~~durian_zzl~~<br>效果如下：<br><del>durian_zzl</del></p>
</li>
<li><p><strong>下划线</strong><br>下划线可以通过 HTML 的<code>u</code>标签来实现：<br>&lt;u&gt;durian-zzl&lt;/u&gt;<br>效果如下：<br><u>durian-zzl</u>   </p>
</li>
<li><p><strong>脚注</strong><br>脚注是对文本的补充说明。脚注的格式如下：<br>[^要注明的文本]<br>实例如下：<br>创建脚注格式类似这样：<a href="愿你走出半生，归来仍是少年。">^1</a></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>第一篇blog</title>
    <url>/2020/02/05/%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
    <content><![CDATA[<p>经过几天时间的努力，在通过B站和CSDN找相关资料之后，终于完成了hexo+github的个人博客的搭建，虽然页面比较简单，但作为个人学习笔记使用已经足够了。<br>作为一名在校大学生，因为与IT行业相关，所以这样的一个个人博客有其存在的必要性。在建立博客的时候，初衷是为了目前的学习和未来专业课的学习，主要是VHDL、电赛、python和通信工程专业相关的，当然第一项就是markdown语言。<br>因为是第一篇blog，所以纪念性意义比较大，而工科男本身也没有多少言语用来抒情，所以就简简单单，言简意赅就好。<br>我想说，我来了，希望我不会走开，至少别那么早。</p>
]]></content>
  </entry>
</search>
